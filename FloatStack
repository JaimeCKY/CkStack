public class FloatStack {
    private float[] stackArray;
    private int top; // Index of the top element
    private static final int DEFAULT_CAPACITY = 10;

    public FloatStack() {
        this(DEFAULT_CAPACITY);
    }

    public FloatStack(int capacity) {
        stackArray = new float[capacity];
        top = -1; // Initialize top to -1 (empty stack)
    }

    public void push(float item) {
        if (top == stackArray.length - 1) {
            System.out.println("Stack is full. Cannot push " + item);
            return;
        }
        stackArray[++top] = item;
    }

    public float pop() {
        if (isEmpty()) {
            System.out.println("Stack is empty. Cannot pop.");
            return Float.NaN; // Return a sentinel value (Not-a-Number)
        }
        return stackArray[top--];
    }

    public float peek() {
        if (isEmpty()) {
            System.out.println("Stack is empty. Cannot peek.");
            return Float.NaN;
        }
        return stackArray[top];
    }

    public boolean isEmpty() {
        return top == -1;
    }

    public int size() {
        return top + 1;
    }

    public static void main(String[] args) {
        FloatStack stack = new FloatStack(5);
        stack.push(3.14f);
        stack.push(2.71f);
        stack.push(1.618f);

        System.out.println("Top element: " + stack.peek()); // Should print 1.618

        while (!stack.isEmpty()) {
            System.out.println("Popped: " + stack.pop());
        }
    }
}
